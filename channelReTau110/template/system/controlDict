/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "$FOAM_CASE/caseSettings"

application     pimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          nextWrite;

writeControl    runTime;

deltaT          $:controlDict.deltaT;

endTime         $:controlDict.endTime;

writeInterval   $:controlDict.endTime;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

libs
(
 $:controlDict.libs
);

functions
{
    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        enabled         true;
        outputControl   outputTime;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
        );
    }

    /*
    flowRate
    {
        type            faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;

        // Write at same frequency as fields
        outputControl   timeStep;
        outputInterval  1;

        log             true;
        valueOutput     false;

        // Type of source: patch/faceZone/sampledSurface
        source          patch;

        sourceName      inout_half1;

        operation       sum;

        fields
        (
            phi
        );
    }
    */
}

// ************************************************************************* //
